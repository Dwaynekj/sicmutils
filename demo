(def q
  (up (literal-function 'x)
      (literal-function 'y)
      (literal-function 'z)))

(defn test-path
  [t]
  (up (+ (* 4 t) 7)
      (+ (* 3 t) 5)
      (+ (* 2 t) 1)))

(defn make-η
  [ν t1 t2]
  (fn [t]
    (* (- t t1) (- t t2) (ν t))))

(defn varied-free-particle-action
  [mass q ν t1 t2]
  (fn [ε]
    (let [η (make-η ν t1 t2)]
      (Lagrangian-action (L-free-particle mass)
                         (+ q (* ε η)) t1 t2))))
                         
(Lagrangian-action (L-free-particle 3.0) test-path 0.0 10.0)

((varied-free-particle-action 3.0 test-path (up sin cos square) 0.0 10.0) 0.001)
; this one takes a while
;(minimize (varied-free-particle-action 3.0 test-path (up sin cos square) 0.0 10.0) -2.0 1.0)

;; Define the variation operator.

(defn δ
  [η]
  (fn [f]
    ;; Define g(ε) as in Eq. 1.22; then δ_η f[q] = Dg(0)
    (fn [q]
      (let [g (fn [ε]
                (f (+ q (* ε η))))]
        
          ((D g) 0)))))

;; Some generic path functions

(defn F [q]
  (fn [t]
    ((literal-function 'f) (q t))))

(defn G [q]
  (fn [t]
    ((literal-function 'g) (q t))))

(def literal-q (literal-function 'q))
(defn φ [f]
     (fn [q]
         ((literal-function 'φ) (f q))))

(defn phiF [q]
  (fn [t]
    ((literal-function 'phi) ((literal-function 'f) (q t)))))

;; Verify some properties of the variation.

(def δ_η (δ (literal-function 'eta)))
(((δ_η   identity) literal-q) 't)
(((δ_η          F) literal-q) 't)
(((δ_η          G) literal-q) 't)
(((δ_η   (* 'c G)) literal-q) 't)
(((δ_η    (* F G)) literal-q) 't)
(((δ_η    (+ F G)) literal-q) 't)
(((δ_η       phiF) literal-q) 't)

(((Lagrange-equations (L-free-particle 'm)) (literal-function 'q)) 't)
(((Lagrange-equations (L-free-particle 'm)) test-path) 't)


(defn proposed-solution [t]
  (* 'a (cos (+ (* 'omega t) 'phi))))

(((Lagrange-equations (L-harmonic 'm 'k)) proposed-solution) 't)
(((Lagrange-equations (L-uniform-acceleration 'm 'g)) (up (literal-function 'x) (literal-function 'y))) 't)
(((Lagrange-equations (L-central-rectangular 'm (literal-function 'U)))
  (up (literal-function 'x)
      (literal-function 'y)))
  't)

(((Lagrange-equations (L-central-polar 'm (literal-function 'U)))
  (up (literal-function 'r)
      (literal-function 'phi)))
  't)

(velocity ((F->C p->r)
           (->local 't (up 'r 'phi) (up 'rdot 'phidot))))


